// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl":  "H4sIAAAAAAAA/+xZ70/zNhD+3r/Cyr7t1Zu8E0OaJrdIKytoAoQo23c3ubbWHDuznUIV9X+fHIf8/tHRUtjGF0R8T+7su3uec1t88RwytAGpqOBj5wf3m4OA+yKgfDV2fn+cff3JuZiMMJGa+gwmI4SwpprB5F4KLXzB0KXw4xC4JpoKjj1rHSGUJJLwFSB3Rhmo3c68qsA3KGPOHSWJe0dC2O1K75q3IyIJci9B+ZJG5q3URcnvLShFVpnrwjmiwdhJEncWM2YdO9ZlOeKN4KuWqH1xjY0ukXtN1IwCC1S+jjVZMEBLSUIYO4SxPGAeEvuMKMVJ2IheGJB1W9uQcbGSIo6QL5gaOz+WnCOEzWIEvjE+0UCvx873jncw4pt7Pgw6q0P0GkhQXkEIS/FUXUEIA9dyO0lPiz370A553EbQj7ghC2D9kFIlW4HYq+0Re42DYL0QQe29Un9XumHw4KWG79s3ZpT/icwf4EVHm5SYjs66yD5iz8Am/f7MGyZbQ3FbGWBb/xKWJGb6D8JiE9XgJtnazyhJ6nYvBSQJ8KAjaCP3Jq0pvFqPavaxZxmR09pLCVhQuOwhJ+2vzxq4kbnjE/cOlIYAFREGOHx+Cg5/DJbnOTmU6b8QNYC4i8MFyHcWg5YuG8zROwlC099UcE0op3xV81wY/rno2LL8r1QHe5WLTtlUNAqPw9NdXY6ldGmSh+Tt7BTydqAumbP9C+TE5vvoUnIYLU9Fqg4aZQ9dY736ISNvb/Mp5CuDDbDuOY0pXwoZEtbLls9J/jnJPyf5f2qSV3i/j/hkPTIHuaH+676CePsZ3jK/b0Gvxcf4juHNBcueFQ1P+gf4Kwal0bB0PYCKBFewB/TN9Skr5QnEKctPTUmy1YaMWKpn1rmWQELKV7sdUun/fXTu3YPNfGMTdrlzF9b8ym18xNtPzVDSpdZvV+c+YUTae3vatVXuD994uu87Q5xusZ8PAY5rbxKqUaWs0m4khRbdtH65mAhtEtgNmH750mf+jWxIn/1+q9ddemHXrkRv+O96vV/f95kf4sW2xV5r7YZMNUWqGI9p81UlqqsELzMz/V2hxPDSc9/mjbiZ4gyiplG0lzdTqr2AtmZ7Qa/2O8h0viYyGg683u8kpq6dwIZw1WWrJlpVyWq5OZXUaYS9/HejvwMAAP//LC5x+GkaAAA=",
	"html.tmpl":     "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWTU/bTBC++1fMG7+HIuRwR0kOhQKqACGCekFV2SSTxJKz63rXUZF3/3u1H/au7RhSCfVSDtgzY8/H8zw7cQwPBRNsyTK4ZMtyh1QQkTIaTQhQssPpSLB8NJuckVkUxTE8kUWGwNZwwahAKnhUVQWhG4TxVZohVyqqqv/XaYY/9OtwPoXxPdmhUgk8V5W7//4pbu5PIoCqSiBdw/gOOScb5KCU8brMtVspAJvmltFNmOqqzLIwHdKVS5EA0hUkjaXLfKHlrlvD+D6swC+BlKeM9qo0AVdKg5ZkuMcMfMyU9CAqlWATO6b8HIt9uuzBWLv9lH86Ye1N4Hm+JBkp4BvJSoSn1xx119w4k712JkI7T6KjBeIl13TmhDfJgWTphk5HRbrZitFsQmBb4Ho6io06n1iun5uc5VakzftRVY0vkS+LNNeiViroxouqVdjD4FVvMnpFHMyqcb8h/CrFbKVzSjC3IA04IOGWLDADCcGbICMJif4De4W26f5Ahhjq/I5v6ScF2chW1wtJtfaJfdp0YR6vKsoWBbQnsXNc4pqUmTDcKgXOPAczdxhyejANWmXUV49IKPlIepV7ZD4Tri/35W6BxRBCfZQakIbRCs7hIcRagFlbrzWS0pRuuhHb3t+BzoYm/yX26O3qtZgks0DBbmV9gHwl6NB7HBwBuBluEOz3IAzA6IOAZmk7BA5pK4BhYHeGkBxcvP+uPl96An0ZVKjnpEVBR53+1+Y4gb4hzjsUW7aqNfqIP0vkombnEXnOKMfaHmSnS0TX7Noy/K3QDQyvXddSd/s6d7CELQnOPxcFkl1KN0oBN/cN5C6rnayf1voP5LWBtxK/d/B6HPP6Y8LR685nHEP/E0CTNc71B2XNxj0TyEHCxekpSPhK9gQkPLyKrTlg10yHYu26edBclovXIdLs9eDZ8v98PBCiadOTF6rRfPxaDEdwNoO2yzGtR2jOX56HMT1QaNvJQs91K9fFfEuKvHl620qmp6/tBujfAQAA//+3qHlyoQsAAA==",
	"scalars.json":  "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)

	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
