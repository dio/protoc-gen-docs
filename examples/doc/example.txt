= __Application_Name__ Protobuf Documentation
:toc:



== Booking.proto



=== Booking
Represents the booking of a vehicle.<br/><br/>Vehicles are some cool shit. But drive carefully!


|===========================================
|*Field* |*Type* |*Label* |*Description*

|vehicle_id | <<int32,int32>> | |ID of booked vehicle.

|customer_id | <<int32,int32>> | |Customer that booked the vehicle.

|status | <<com.example.BookingStatus,BookingStatus>> | |Status of the booking.

|confirmation_sent | <<bool,bool>> | |Has booking confirmation been sent?

|payment_received | <<bool,bool>> | |Has payment been received?

|===========================================



=== BookingStatus
Represents the status of a vehicle booking.


|===========================================
|*Field* |*Type* |*Label* |*Description*

|id | <<int32,int32>> | |Unique booking status ID.

|description | <<string,string>> | |Booking status description. E.g. "Active".

|hahaha | <<string,string>> | |Name.

|===========================================



=== BookingStatusID
Represents the booking status ID.


|===========================================
|*Field* |*Type* |*Label* |*Description*

|===========================================



=== EmptyBookingMessage
An empty message for testing







== Scalar Value Types

|==============================================================
|*.proto Type* |*Notes* |*C++ Type* |*Java Type* |*Python Type*

|[[double]] (((double))) double | |double |double |float

|[[float]] (((float))) float | |float |float |float

|[[int32]] (((int32))) int32 |Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. |int32 |int |int

|[[int64]] (((int64))) int64 |Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. |int64 |long |int/long

|[[uint32]] (((uint32))) uint32 |Uses variable-length encoding. |uint32 |int |int/long

|[[uint64]] (((uint64))) uint64 |Uses variable-length encoding. |uint64 |long |int/long

|[[sint32]] (((sint32))) sint32 |Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. |int32 |int |int

|[[sint64]] (((sint64))) sint64 |Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. |int64 |long |int/long

|[[fixed32]] (((fixed32))) fixed32 |Always four bytes. More efficient than uint32 if values are often greater than 2^28. |uint32 |int |int

|[[fixed64]] (((fixed64))) fixed64 |Always eight bytes. More efficient than uint64 if values are often greater than 2^56. |uint64 |long |int/long

|[[sfixed32]] (((sfixed32))) sfixed32 |Always four bytes. |int32 |int |int

|[[sfixed64]] (((sfixed64))) sfixed64 |Always eight bytes. |int64 |long |int/long

|[[bool]] (((bool))) bool | |bool |boolean |boolean

|[[string]] (((string))) string |A string must always contain UTF-8 encoded or 7-bit ASCII text. |string |String |str/unicode

|[[bytes]] (((bytes))) bytes |May contain any arbitrary sequence of bytes. |string |ByteString |str

|==============================================================
