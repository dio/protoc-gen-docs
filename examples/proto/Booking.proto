syntax = "proto3";

// This field is deprecated. Use the TSB v2 API instead.
// In most implementations this does not generate compiler warnings, but it's that
// is only well-supported for field deprecations.
option deprecated = true;

// $title: Workspace
// $description: Workspace is a configuration domain for set of namespaces and Workspaces.
// $location: https://tetrate.io/docs/reference/config/v2/workspace.html

// ServiceDefinition describes the properties of services running on
// VMs or services outside the mesh. This service definition is
// intended to be authored by the cluster operator where access to
// this service is desired.
//
// The following example declares a VM service called `details` in the
// `bookinfo` namespace. The service has no sidecars and requires
// simple TLS connections. The VM service is expected to receive
// traffic from the ingress Gateway.
//
// ```yaml
// apiVersion: registry.tetrate.io/v1alpha1
// kind: ServiceDefinition
// metadata:
//   name: details
//   namespace: bookinfo
// spec:
//   hostname: details.prod.internal.company.com
//   ports:
//   - number: 80
//     name: http
//     protocol: HTTP
//   - number: 443
//     name: https
//     protocol: HTTPS
//   sidecarsPresent: false
//   externalServiceTlsSettings:
//     tlsMode: SIMPLE
//     caCertificates: /path/to/ca/cert/to/verify/server/cert
//   endpointSource:
//     manual:
//       values:
//       - address: 1.1.1.1
//       - address: 2.2.2.2
// ```
//
// In the above example, services in the bookinfo namespace can access
// the details service by using
// https://details.prod.internal.company.com . The sidecar would do a
// SNI Passthrough and load balance the traffic among the two
// endpoints. Alternatively, they could also access the service as
// plaintext http://details.prod.internal.company.com. The Sidecar in
// a kubernetes pod would intercept the traffic, and initiate simple
// TLS connection to the destination appropriately.
package com.example;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "tsb/rbac/v2/options.proto";
import "tsb/types/v2/options.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

// Represents the booking status ID.
message BookingStatusID {
  // Unique booking status ID.
  // $hide_from_docs
  int32 id = 1;
}

// Represents the status of a vehicle booking.
message BookingStatus {
  // Unique booking status ID.
  int32 id           = 1 [(google.api.field_behavior) = REQUIRED];
  // Booking status description. E.g. "Active".
  string description = 2 [(validator.field) = {string_not_empty: true, length_lt: 255}];
  // Name. $hide_from_yaml
  string hahaha = 3 [(google.api.field_behavior) = REQUIRED, (validate.rules).string.min_len = 1];
}


// Represents the booking of a vehicle.
//
// Vehicles are some cool shit. But drive carefully!
message Booking {
  // ID of booked vehicle.
  int32 vehicle_id     = 1;
  // Customer that booked the vehicle.
  int32 customer_id    = 2;
  // Status of the booking.
  BookingStatus status = 3;

  // Has booking confirmation been sent?
  bool confirmation_sent = 4;

  // Has payment been received?
  bool payment_received = 5;
}

// An empty message for testing
message EmptyBookingMessage {
}

// $hide_from_docs
message HideFromDocsMessage {
}

// Haha $hide_from_yaml
message HideFromYamlMessage {
}

service BookingService {
  // Used to book a vehicle. Pass in a Booking and a BookingStatus will be returned.
  rpc BookVehicle (Booking) returns (BookingStatus) {
    option (tetrateio.api.tsb.rbac.v2.requires) = {
      permissions: [CREATE, WRITE]
    };
    option (tetrateio.api.tsb.types.v2.spec) = {
      type: "istio.networking.v1beta1.VirtualService"
    };
    option (google.api.http) = {
      post: "/api/bookings/vehicle/{vehicle_id}"
      body: "*"
    };
  }

  // Used to subscribe to updates of the BookingStatus.
  rpc BookingUpdates (BookingStatusID) returns (stream BookingStatus);

  // HAHAHA. $hide_from_docs
  rpc BookingUpdates2 (BookingStatusID) returns (stream BookingStatus);
}

// OK hahah.
// HAHAHA. $hide_from_docs
service BookingServiceHidden {
  rpc BookingUpdates (BookingStatusID) returns (stream BookingStatus);
}
